[
    {
        "id": "9464cef46b29375e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "74b16504a5f145bf",
        "type": "group",
        "z": "9464cef46b29375e",
        "name": "Adquisi√≥n del Dinagrama mapa Modbus",
        "style": {
            "label": true
        },
        "nodes": [
            "964378278d11b0bf",
            "c971cc7fb76a02e5",
            "f8531dc9aa19f6ff",
            "1493d28a3db431f1"
        ],
        "x": 54,
        "y": 79,
        "w": 472,
        "h": 142
    },
    {
        "id": "964378278d11b0bf",
        "type": "function",
        "z": "9464cef46b29375e",
        "g": "74b16504a5f145bf",
        "name": "DinagramaActualPruebaSuperficie",
        "func": "// dinagrama con Average Power Factor 3000\nnode.status({ fill: \"green\", shape: \"ring\", text: \"Data\" });\nvar Desp_CD = [1.878684999999999938e+00, 1.232985999999999915e+00, 7.274979999999999780e-01, 3.544760000000000133e-01, 1.152999999999999997e-01, 0.000000000000000000e+00, 0.000000000000000000e+00, 3.301049999999999818e-01, 7.999619999999999509e-01, 1.393694999999999906e+00, 2.117668999999999802e+00, 2.974184999999999857e+00, 3.964010000000000034e+00, 5.065363999999999756e+00, 6.265900000000000247e+00, 7.553575999999999624e+00, 8.918960000000000221e+00, 1.035898300000000027e+01, 1.188653099999999974e+01, 1.350060599999999944e+01, 1.516723400000000055e+01, 1.688679799999999886e+01, 1.867080199999999834e+01, 2.049749500000000069e+01, 2.235991500000000087e+01, 2.427611599999999825e+01, 2.623199500000000128e+01, 2.823063900000000004e+01, 3.026319000000000159e+01, 3.234844700000000017e+01, 3.447583600000000104e+01, 3.663031699999999802e+01, 3.881888699999999659e+01, 4.104640599999999750e+01, 4.330215700000000112e+01, 4.559054100000000176e+01, 4.792531300000000272e+01, 5.030093300000000056e+01, 5.257733199999999840e+01, 5.485375100000000259e+01, 5.716169899999999870e+01, 5.943546200000000113e+01, 6.165195500000000095e+01, 6.385803700000000305e+01, 6.606482800000000566e+01, 6.822777100000000416e+01, 7.032715500000000475e+01, 7.239657200000000614e+01, 7.443364300000000355e+01, 7.641474900000000048e+01, 7.831726500000000613e+01, 8.016557799999999645e+01, 8.196298799999999574e+01, 8.371079699999999946e+01, 8.539305299999999477e+01, 8.698038400000000081e+01, 8.849019900000000405e+01, 8.993009000000000697e+01, 9.127382799999999463e+01, 9.251773300000000688e+01, 9.367951999999999657e+01, 9.475151999999999930e+01, 9.571080299999999852e+01, 9.658106499999999528e+01, 9.735993000000000563e+01, 9.802408300000000452e+01, 9.859062600000000032e+01, 9.906094000000000221e+01, 9.944077699999999709e+01, 9.971840400000000670e+01, 9.990279200000000515e+01, 1.000000000000000000e+02, 9.999384700000000237e+01, 9.991777000000000442e+01, 9.973817900000000236e+01, 9.947117799999999477e+01, 9.913639999999999475e+01, 9.872924399999999423e+01, 9.826827000000000112e+01, 9.774028699999999503e+01, 9.714606000000000563e+01, 9.649962600000000634e+01, 9.579584499999999991e+01, 9.500419399999999825e+01, 9.416693100000000527e+01, 9.330575899999999478e+01, 9.236308300000000315e+01, 9.137755500000000097e+01, 9.037801199999999824e+01, 8.932035500000000638e+01, 8.820335799999999438e+01, 8.704481199999999319e+01, 8.584824700000000064e+01, 8.459011700000000644e+01, 8.328974999999999795e+01, 8.195588600000000667e+01, 8.055808100000000138e+01, 7.911205599999999549e+01, 7.763775099999999441e+01, 7.610893699999999740e+01, 7.451687099999999475e+01, 7.290549799999999436e+01, 7.126285300000000689e+01, 6.954499300000000517e+01, 6.780590800000000229e+01, 6.605848299999999540e+01, 6.423760699999999702e+01, 6.236697600000000108e+01, 6.049874200000000002e+01, 5.858972599999999886e+01, 5.661216799999999694e+01, 5.462450499999999920e+01, 5.263218299999999772e+01, 5.058688500000000232e+01, 4.849482499999999874e+01, 4.639611200000000224e+01, 4.428031500000000165e+01, 4.213439799999999735e+01, 3.997316099999999750e+01, 3.781079299999999677e+01, 3.563448499999999797e+01, 3.342322599999999966e+01, 3.123504099999999895e+01, 2.907568200000000047e+01, 2.689893299999999954e+01, 2.474330199999999991e+01, 2.263419499999999829e+01, 2.058155199999999851e+01, 1.858813400000000016e+01, 1.667694799999999944e+01, 1.484576999999999991e+01, 1.308501500000000028e+01, 1.141738199999999992e+01, 9.842795000000000627e+00, 8.365164999999999296e+00, 6.990244999999999820e+00, 5.721943999999999697e+00, 4.565172999999999703e+00, 3.538412999999999808e+00, 2.649179999999999868e+00];\nvar Esfu_CD = [1.008798252900729494e+04, 1.008798252900729312e+04, 1.008798252900729312e+04, 1.008798252900729312e+04, 1.008798252900729312e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.008798252900732223e+04, 1.003066292362294371e+04, 1.002397692592482417e+04, 1.007888496369363929e+04, 1.020161846999821682e+04, 1.038847887801109755e+04, 1.063101297989496197e+04, 1.091334353234988157e+04, 1.121216743313323241e+04, 1.149290330564374744e+04, 1.171109386248319242e+04, 1.181930211875299938e+04, 1.191247818149847808e+04, 1.195117046063053203e+04, 1.193790502947649657e+04, 1.198336607259407901e+04, 1.178082908389674412e+04, 1.157320372030790168e+04, 1.136164951696275602e+04, 1.115921470677456091e+04, 1.097105796026924872e+04, 1.079670882595345574e+04, 1.064630307664435168e+04, 1.054126782388750507e+04, 1.050118865952926353e+04, 1.053870574635347657e+04, 1.040398816922187325e+04, 1.040418105849144740e+04, 1.043392709540967553e+04, 1.049023401690371611e+04, 1.055717633720140657e+04, 1.062066978228337030e+04, 1.068850322810838770e+04, 1.076827798777320277e+04, 1.084787585838750601e+04, 1.091663962907137466e+04, 1.097317581111810250e+04, 1.100592071835482056e+04, 1.100168513596008415e+04, 1.096387711834150286e+04, 1.089165005899032985e+04, 1.078570453946111593e+04, 1.066186626505710774e+04, 1.054493097855147971e+04, 1.042520588612371648e+04, 1.028540820930964401e+04, 1.014246968052418379e+04, 1.004947620356441257e+04, 9.968240085241852285e+03, 9.927257422673897963e+03, 9.937902375545487303e+03, 1.001154910354158164e+04, 1.015957176634714779e+04, 1.008798252900729494e+04, 9.826206821676845721e+03, 9.894764630214294812e+03, 9.960122336852649823e+03, 1.002192518702164307e+04, 1.007981842615100322e+04, 1.013344729967046442e+04, 1.018245705300975533e+04, 1.022649293159861008e+04, 1.026520018086675555e+04, 1.029822404624392584e+04, 1.032520977315985328e+04, 1.034580260704426473e+04, 1.035964779332689614e+04, 1.036639057743769081e+04, 1.037179194794231989e+04, 1.036956869714835557e+04, 1.036249967416272921e+04, 1.031886385104536748e+04, 1.026773313573081396e+04, 1.020922265204924952e+04, 1.014935670853852571e+04, 1.008719933473768651e+04, 1.002429264423116911e+04, 9.968328694291565625e+03, 9.921751412328500010e+03, 9.795054900438126424e+03, 9.685434951267470751e+03, 9.585989365069211999e+03, 9.637767743534630426e+03, 9.528280113934815745e+03, 9.588105411170494335e+03, 9.616383194632260711e+03, 9.615185330206611980e+03, 9.576558948466379661e+03, 9.498877246121735880e+03, 9.383430004488976920e+03, 9.230007617435607244e+03, 9.040694469996247790e+03, 8.823160345009555385e+03, 8.583223527955513418e+03, 8.322121791310461049e+03, 8.048787898428831795e+03, 7.613481387902928873e+03, 7.256184095688500747e+03, 6.972098877563221322e+03, 6.762218058227006622e+03, 6.620131154961348329e+03, 6.631683273957836718e+03, 6.652507384401468698e+03, 6.684860739014118735e+03, 6.723066238330754459e+03, 6.713128208801943401e+03, 6.868569569604682329e+03, 7.111438151547648886e+03, 7.441733954630845801e+03, 7.673506155701647003e+03, 8.116672793347762308e+03, 8.421259106930323469e+03, 8.717478677063894793e+03, 8.995711848679373361e+03, 9.247543508769198525e+03, 9.410569108708819840e+03, 9.553840446269145104e+03, 9.678085139442657237e+03, 9.784030806222039246e+03, 9.872405064599963225e+03, 9.943935532569110364e+03, 9.999349828122158215e+03, 1.003937556925178433e+04, 1.006474037395066989e+04, 1.007617186021148518e+04, 1.007439764602691503e+04, 1.006014534938963334e+04, 1.008798252900729494e+04];\n\nfor (let i = 0; i < Esfu_CD.length; i++) {\n    Esfu_CD[i] = Esfu_CD[i]/1000;\n}\nvar tamano = Desp_CD.length;\n\ncontext.set(\"tamano\", tamano, \"memoryOnly\");\n// variables Globales\nglobal.set(\"Dinagrama.superficie.Desp_CD\", Desp_CD);\nglobal.set(\"Dinagrama.superficie.Esfu_CD\", Esfu_CD);\nglobal.set(\"Dinagrama.superficie.nMuestras\", tamano);\n\nreturn msg;\n\nfunction Savgol(X, caso = 3) {\n    //desarrollado por el ing Jose\n    var k = 0;\n    var y = [];\n    switch (caso) {\n        case 1:\n            for (let i = 2; i < X.length - 2; i++) {\n                y[k] = (1 / 35) * (-3 * X[i - 2] + 12 * X[i - 1] + 17 * X[i] + 12 * X[i + 1] - 3 * X[i + 2]);\n                k = k + 1;\n            }\n            break;\n        case 2:\n            for (let i = 3; i < X.length - 3; i++) {\n                y[k] = (1 / 21) * (-2 * X[i - 3] + 3 * X[i - 2] + 6 * X[i - 1] + 7 * X[i] + 6 * X[i + 1] + 3 * X[i + 2] - 2 * X[i + 3]);\n                k = k + 1;\n            }\n            break;\n        case 3:\n            for (let i = 4; i < X.length - 4; i++) {\n                y[k] = (1 / 231) * (-21 * X[i - 4] + 14 * X[i - 3] + 39 * X[i - 2] + 54 * X[i - 1] + 59 * X[i] + 54 * X[i + 1] + 39 * X[i + 2] + 14 * X[i + 3] - 21 * X[i + 4]);\n                k = k + 1;\n            }\n            break;\n        case 4:\n            for (let i = 3; i < X.length - 3; i++) {\n                y[k] = (1 / 231) * (5 * X[i - 3] - 30 * X[i - 2] + 75 * X[i - 1] + 131 * X[i] + 75 * X[i + 1] + -30 * X[i + 2] + 5 * X[i + 3]);\n                k = k + 1;\n            }\n            break;\n        case 5:\n            for (let i = 4; i < X.length - 4; i++) {\n                y[k] = (1 / 429) * (15 * X[i - 4] - 55 * X[i - 3] + 30 * X[i - 2] + 135 * X[i - 1] + 179 * X[i] + 135 * X[i + 1] + 30 * X[i + 2] - 55 * X[i + 3] + 15 * X[i + 4]);\n                k = k + 1;\n            }\n            break;\n        default:\n            // se define el caso 3 en caso tal de que no\n            for (let i = 4; i < X.length - 4; i++) {\n                y[k] = (1 / 231) * (-21 * X[i - 4] + 14 * X[i - 3] + 39 * X[i - 2] + 54 * X[i - 1] + 59 * X[i] + 54 * X[i + 1] + 39 * X[i + 2] + 14 * X[i + 3] - 21 * X[i + 4]);\n                k = k + 1;\n            }\n\n    }\n    return y\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c971cc7fb76a02e5",
        "type": "inject",
        "z": "9464cef46b29375e",
        "g": "74b16504a5f145bf",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "964378278d11b0bf"
            ]
        ]
    },
    {
        "id": "f8531dc9aa19f6ff",
        "type": "function",
        "z": "9464cef46b29375e",
        "g": "74b16504a5f145bf",
        "name": "setDinagrama",
        "func": "// adquision de los dinagramas de superficie\nvar Desp_CD = global.get('Dinagrama.superficie.Desp_CD')||-1;\nvar Esfu_CD = global.get('Dinagrama.superficie.Esfu_CD')||-1;\n\n// adquision del dinagrama de superficie\nadquirirDinagrama('DinagramaSuperficie',Desp_CD,Esfu_CD);\nadquirirDinagrama('DinagramaFondo',[1,2,3,4],[5,6,7,8]);\n\n\n\n// funci√≥n fifo para la adquisi√≥n del dinagrama\nfunction adquirirDinagrama(filename, Desp_CD, Esfu_CD) {\n    // Identificaci√≥n si existe el file\n    var file = flow.get(filename)||-1;//adquisi√≥n del archivo flow\n    if (Array.isArray(file)) {\n        // ya tiene datos guardados\n        node.status({ fill: \"green\", shape: \"ring\", text: \"data\" });\n    } else {\n        var dinagrama = {//Estructura Dinagrama\n            Desp_CD: [],//vector de desplazamiento\n            Esfu_CD: [],//vector de esfuerzo\n            year: 0,//fecha de adquisi√≥n\n            moth: 0,\n            day: 0,\n            hour: 0,\n            min: 0,\n        };\n        // definicion de vector para la adquisi√≥n\n        var vector = [dinagrama, dinagrama, dinagrama, dinagrama, dinagrama];\n        // guardar variable del dinagrama\n        file = vector;// guardar file para la siguiente condici√≥n\n        flow.set(filename,vector);\n        node.status({ fill: \"blue\", shape: \"dot\", text: \"confInit\" });\n    }\n\n    // condici√≥n si es vector y tengo datos del dinagrama\n    if (Array.isArray(file) && Array.isArray(Desp_CD) && Array.isArray(Esfu_CD)){\n        var date = new Date();// adquision de la fecha\n        var fecha = {\n            year : date.getFullYear(),\n            moth : date.getMonth() + 1,\n            day  : date.getDate(),\n            hour : date.getHours(),\n            min  : date.getMinutes(),\n\n        }\n        // clonar la estructura del archivo\n        var data = { ... file[0]};\n        // asignaci√≥n de variables\n        data.Desp_CD = Desp_CD;\n        data.Esfu_CD = Esfu_CD;\n        data.year = fecha.year;\n        data.moth = fecha.moth;\n        data.day = fecha.day;\n        data.hour = fecha.hour;\n        data.min = fecha.min;\n        // condici√≥n para el fifo de la funci√≥n\n        file.unshift(data);//adici√≥n en la primera linea\n        file.pop();//Eliminar la √∫ltima posici√≥n\n        // guardar el vector \n        flow.set(filename,file);\n    }else{\n        node.status({fill:\"red\",shape:\"ring\",text:\"NoSeCreo\"});\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1493d28a3db431f1",
        "type": "inject",
        "z": "9464cef46b29375e",
        "g": "74b16504a5f145bf",
        "name": "",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "f8531dc9aa19f6ff"
            ]
        ]
    }
]